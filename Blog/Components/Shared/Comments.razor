@inject CommentsService _commentService
@inject NavigationManager _nav
@inject ILogger<Comments> _logger

<div class="my-3">
    @if (comments is null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else if (comments.Count == 0)
    {
        <p>No comments yet. Be the first to comment!</p>
    }
    else
    {
        <ul>
            @foreach (var comment in comments)
            {
                <div class="mb-4">
                    <CommentDisplay Comment="comment" UserId="@UserId" PostId="@PostId" OnCommentUpdated="LoadComments" />
                </div>
            }
        </ul>
    }
</div>

<AuthorizeView>
    <div>
        <MudTextField Variant="Variant.Outlined" @bind-Value="newCommentContent" Placeholder="Add a comment..." />
        <MudButton Class="my-1" Variant="Variant.Filled" OnClick="SubmitComment" Disabled="@string.IsNullOrWhiteSpace(newCommentContent)" Color="Color.Primary">
            Post Comment
        </MudButton>
    </div>
</AuthorizeView>

@code {
    [Parameter]
    public int PostId { get; set; }

    [Parameter]
    public string UserId { get; set; }

    private List<Comment> comments;
    private string newCommentContent;

    protected override async Task OnInitializedAsync()
    {
        await LoadComments();
    }

    private async Task LoadComments()
    {
        try
        {
            comments = await _commentService.GetCommentsByPostIdAsync(PostId);
        }
        catch (Exception ex)
        {
            _logger.LogError($"Error loading comments: {ex.Message}");
        }
    }

    private async Task SubmitComment()
    {
        if (!string.IsNullOrWhiteSpace(newCommentContent))
        {
            var newComment = new Comment
                {
                    Content = newCommentContent,
                    PostId = PostId,
                    AuthorId = UserId,
                    CreatedAt = DateTime.UtcNow
                };

            try
            {
                await _commentService.AddCommentAsync(newComment);
                await LoadComments(); // Refresh comments after adding
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error submitting comment: {ex.Message}");
            }
            finally
            {
                newCommentContent = string.Empty;
            }
        }
    }
}