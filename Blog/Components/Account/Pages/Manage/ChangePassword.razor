@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Blog.Data;
    @using Blog.Data.Models

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Change password</PageTitle>

<h3 class="text-2xl font-bold mb-4">Change Password</h3>

<StatusMessage Message="@message" />

<div class="flex justify-center">
    <div class="w-full max-w-md">
        <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-500 mb-4" role="alert" />

            <div class="mb-4 relative">
                <label for="old-password" class="text-gray-600 bg-white px-1">Old Password</label>
                <InputText type="password" @bind-Value="Input.OldPassword" class="block w-full p-2 border border-gray-300 rounded-lg" autocomplete="current-password" aria-required="true" placeholder="Please enter your old password." />
                <ValidationMessage For="() => Input.OldPassword" class="text-red-500" />
            </div>

            <div class="mb-4 relative">
                <label for="new-password" class="text-gray-600 bg-white px-1">New Password</label>
                <InputText type="password" @bind-Value="Input.NewPassword" class="block w-full p-2 border border-gray-300 rounded-lg" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password." />
                <ValidationMessage For="() => Input.NewPassword" class="text-red-500" />
            </div>

            <div class="mb-4 relative">
                <label for="confirm-password" class="text-gray-600 bg-white px-1">Confirm Password</label>
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="block w-full p-2 border border-gray-300 rounded-lg" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password." />
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-red-500" />
            </div>

            <button type="submit" class="w-full py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition duration-200">Update Password</button>
        </EditForm>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
