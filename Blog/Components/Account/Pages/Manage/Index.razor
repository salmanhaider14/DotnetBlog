@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Blog.Data;
    @using Blog.Data.Models

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<h3 class="text-2xl font-bold mb-4">Profile</h3>

<StatusMessage />

<div class="flex justify-center">
    <div class="w-full max-w-md">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-500 mb-4" role="alert" />

            <div class="mb-4">
                <label for="fullname" class="text-gray-600 bg-white px-1">Full Name</label>
                <input type="text" value="@fullname" class="block w-full p-2 border border-gray-300 rounded-lg bg-gray-100" placeholder="Please choose your Full Name." disabled />
            </div>

            <div class="mb-4 relative">
                <label for="phone-number" class="text-gray-600 bg-white px-1">Phone number</label>
                <InputText @bind-Value="Input.PhoneNumber" class="block w-full p-2 border border-gray-300 rounded-lg" placeholder="Please enter your phone number." />
                <ValidationMessage For="() => Input.PhoneNumber" class="text-red-500" />
            </div>

            <button type="submit" class="w-full py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition duration-200">Save</button>
        </EditForm>
    </div>
</div>


@code {
    private ApplicationUser user = default!;
    private string? fullname;
    private string? phoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        fullname = user.FullName;
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }
}
