@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Blog.Data;
@using Blog.Data.Models

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="flex flex-col md:flex-row gap-6 justify-center">
    <div class="w-full md:w-1/3">
        <section class="bg-white p-6 rounded-lg shadow-lg">
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h2 class="text-2xl font-semibold mb-4 text-center">Login to your account</h2>
                <hr class="mb-4 border-gray-300" />
                <ValidationSummary class="text-red-500 mb-4" role="alert" />

                <!-- Email Input -->
                <div class="relative mb-4">
                    <label for="email" class="font-semibold text-gray-500 bg-white px-1 text-sm left-4 -translate-y-1/2">Email</label>
                    <InputText @bind-Value="Input.Email" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring focus:ring-blue-500 focus:border-blue-500"
                               autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <ValidationMessage For="() => Input.Email" class="text-red-500 text-sm mt-1" />
                </div>

                <!-- Password Input -->
                <div class="relative mb-4">
                    <label for="password" class="font-semibold text-gray-500 bg-white px-1 text-sm left-4 -translate-y-1/2">Password</label>
                    <InputText type="password" @bind-Value="Input.Password" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring focus:ring-blue-500 focus:border-blue-500"
                               autocomplete="current-password" aria-required="true" placeholder="password" />
                    <ValidationMessage For="() => Input.Password" class="text-red-500 text-sm mt-1" />
                </div>

                <!-- Remember Me Checkbox -->
                <div class="flex items-center mb-4">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="h-4 w-4 text-blue-600 border-gray-300 rounded" />
                    <label class="ml-2 text-sm text-gray-600">Remember me</label>
                </div>

                <!-- Submit Button -->
                <button type="submit" class="w-full py-3 rounded-lg bg-blue-500 text-white font-semibold hover:bg-blue-600 transition-all duration-300">
                    Log in
                </button>

                <!-- Additional Links -->
                <div class="text-center mt-4">
                    <p><a href="Account/ForgotPassword" class="text-blue-500 hover:underline">Forgot your password?</a></p>
                    <p><a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="text-blue-500 hover:underline">Register as a new user</a></p>
                    <p><a href="Account/ResendEmailConfirmation" class="text-blue-500 hover:underline">Resend email confirmation</a></p>
                </div>
            </EditForm>
        </section>
    </div>

    <div class="w-full md:w-1/3">
        <section class="bg-white p-6 rounded-lg shadow-lg">
            <h3 class="text-xl font-semibold text-center mb-4">Log in using another service</h3>
            <hr class="mb-4 border-gray-300" />
            <ExternalLoginPicker />
        </section>
    </div>
</div>


@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
