@page "/create-post"
@rendermode InteractiveServer
@inject PostService _postService
@inject NavigationManager NavigationManager
@inject IJSRuntime js
@attribute [Authorize(Roles ="Author,Admin")]
@inject AuthenticationStateProvider _authStateProvider
@inject UserManager<ApplicationUser> _userManager
@inject ILogger<CreatePost> _logger
@inject ISnackbar Snackbar


<MudContainer Class="mt-16">
    <MudText Typo="Typo.h3" Class="mb-8">Create New Post</MudText>

    <EditForm Model="@post" OnValidSubmit="@HandleValidSubmit" FormName="CreatePostForm">
        <DataAnnotationsValidator />
       @*  <ValidationSummary /> *@

        <div class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
            <div class="mb-4">
               
                <MudTextField @bind-Value="post.Title" Label="Title" Variant="Variant.Outlined" />
                <ValidationMessage For="@(() => post.Title)" class="text-red-500 text-sm mt-1" />
            </div>
            @if (EditorEnabled)
            {
                <div id="toolbar">
                    <span class="ql-formats">
                        <select class="ql-font">
                            <option selected=""></option>
                            <option value="serif"></option>
                            <option value="monospace"></option>
                        </select>
                        <select class="ql-size">
                            <option value="small"></option>
                            <option selected=""></option>
                            <option value="large"></option>
                            <option value="huge"></option>
                        </select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-bold"></button>
                        <button class="ql-italic"></button>
                        <button class="ql-underline"></button>
                        <button class="ql-strike"></button>
                    </span>
                    <span class="ql-formats">
                        <select class="ql-color"></select>
                        <select class="ql-background"></select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-list" value="ordered"></button>
                        <button class="ql-list" value="bullet"></button>
                        <button class="ql-indent" value="-1"></button>
                        <button class="ql-indent" value="+1"></button>
                        <select class="ql-align">
                            <option selected=""></option>
                            <option value="center"></option>
                            <option value="right"></option>
                            <option value="justify"></option>
                        </select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-link"></button>
                        <button class="ql-image"></button>
                        <button class="ql-code-block"></button>
                        <button class="ql-blockquote"></button>
                    </span>
                </div>
            }
            <div class="min-h-[200px]" @ref="@divEditorElement" />

            <ImagesUpload @bind-PostImageUrls="post.ImageUrls" />

            <div class="mb-4">
                <MudSelect 
                           T = "int"
                           Variant="Variant.Outlined"
                           Label="Select Category"
                           Placeholder="Select Category"
                           Required
                           @bind-Value="post.CategoryId"
                           >
                  
                    @foreach (var category in categories)
                    {
                        <MudSelectItem Value="category.Id">@category.Name</MudSelectItem>
                    }
                </MudSelect>
                <p class="text-red-500 text-sm mt-1">@categoryError</p>
            </div>

            <div class="flex items-center justify-between">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" >Create Post</MudButton>
            </div>
        </div>
    </EditForm>
</MudContainer>

@code {


    private CreatePostVM post = new CreatePostVM();
    private List<Category> categories = new List<Category>();
    private string categoryError = string.Empty;

    private ElementReference divEditorElement;
    private bool EditorEnabled = true;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            try
            {
                await js.InvokeAsync<string>(
                "QuillFunctions.createQuill", divEditorElement);
            }
            catch(Exception ex)
            {
                _logger.LogError($"Error creating text editor : {ex}");
                Snackbar.Add("Error creating the text editor", Severity.Error);

            }

        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var res = await _postService.GetAllCategoriesAsync();
            categories = res.Categories;
            categoryError = string.Empty;
        }
        catch (Exception ex)
        {
            _logger.LogError($"Error fetching categories : {ex}");
            Snackbar.Add("Error fetching categories. Please try again later.", Severity.Error);

        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            post.Content = await js.InvokeAsync<string>("QuillFunctions.getQuillContent");
            if (string.IsNullOrWhiteSpace(post.Content) || post.Content.Length < 50)
            {
                // Display custom error message
                Snackbar.Add("Content must be at least 50 characters long.", Severity.Error);
                return;
            }
            if (post.CategoryId == 0)
            {
                categoryError = "Pls select a category";
                return;
            }
            var auth = await _authStateProvider.GetAuthenticationStateAsync();
            post.AuthorId = _userManager.GetUserId(auth.User);
            var createdPost = await _postService.CreatePostAsync(post);
            Snackbar.Add("Post created successfully!", Severity.Success);

            // Navigate to a different page after successful submission
            NavigationManager.NavigateTo("/");
        }
        catch(Exception ex)
        {
            _logger.LogError("Error creating post: " + ex.Message);
            Snackbar.Add("Error creating the post. Please try again.", Severity.Error);

        }

    }

}
