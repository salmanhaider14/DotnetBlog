@page "/post/{Id}"
@rendermode InteractiveServer
@inject PostService _postService
@inject AuthenticationStateProvider _authStateProvider
@inject UserManager<ApplicationUser> _userManager
@inject CommentsService _commentService
@inject NavigationManager _nav
@inject ILogger<PostDetails> _logger
@inject IDialogService DialogService
@inject ISnackbar Snackbar


<PageTitle>@pageTitle</PageTitle>


<div class="min-h-screen flex justify-center items-start "> <!-- Main Flex Container for Centering -->
    @if(post is null)
    {
        <MudCard Class="w-full max-w-[800px] p-6 bg-white shadow-md rounded-lg border-2 mt-12">
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
            <MudCardContent>
                <MudSkeleton Width="30%" Height="42px;" />
                <MudSkeleton Width="80%" />
                <MudSkeleton Width="100%" />
            </MudCardContent>
            <MudCardActions>
                <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
                <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
            </MudCardActions>
        </MudCard>
    }
    else
    {
        <!-- Vertical Blog Container -->
        <div class="w-full max-w-[800px] p-6 bg-white shadow-md rounded-lg border-2 mt-12"> <!-- Adjust Width and Add Spacing -->
            
            <!-- Category Chip -->
            <MudChip T="string" Color="Color.Primary" Class="w-max mb-4" OnClick="()=>HandleCategory(post.CategoryId)">@post.Category.Name</MudChip>
            
            <!-- Title -->
            <h1 class="text-3xl font-bold mb-6">@post.Title</h1>
        
            <!-- Post Metadata (e.g., author and date) -->
            <div class="flex justify-between">
            <div class="flex items-center text-gray-500 gap-8 mb-4">
                <div class="flex cursor-pointer items-center gap-2" @onclick="() => HandleAuthor(post.AuthorId)">
                    <MudAvatar Size="Size.Small" Color="Color.Secondary">U</MudAvatar>
                    <p>@post.Author.FullName</p>
                </div>
                
                <p>@post.CreatedAt.ToLongDateString()</p>
            </div>
            
                <AuthorizeView Roles="Author,Admin">
                    @if(userId == post.AuthorId)
                    {
                        <div class="flex items-center gap-1">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" aria-label="edit" OnClick="() => HandleEdit(post.Id)" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="()=> HandleDelete(post.Id)" />
                        </div>
                    }
                    
                </AuthorizeView>
               
            </div>

            <Carousel ImageUrls="@post.ImageUrls" />

            <div className="ql-container ql-snow ql-display-content">
            <div class="ql-editor"> 
                @((MarkupString)post.Content)
            </div>
            </div>
            <h1 class="text-2xl font-bold my-3">Comments</h1>
            <AuthorizeView>
                <NotAuthorized>
                    <p class="text-md mb-3 text-gray-600 font-semibold">Sign In to post comments</p>
                </NotAuthorized>
            </AuthorizeView>
            <MudDivider />
            
             <!-- Comments Section -->
            <Comments PostId="@post.Id" UserId="@userId" />
        </div>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    private Post post;
    private string pageTitle = "Blog";
    private string userId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            post = await _postService.GetPostByIdAsync(int.Parse(Id));
            var auth = await _authStateProvider.GetAuthenticationStateAsync();
            var user = await _userManager.GetUserAsync(auth.User);

            if (user is not null)
            {
                userId = user.Id;
            }
            if (post is not null)
            {
                pageTitle = post.Title;
            }
        }
        catch(Exception ex)
        {
            _logger.LogError("Error getting post or user", ex);
            Snackbar.Add("Error getting post. Try again later", Severity.Error);
        }

    }
    private void HandleEdit(int postId)
    {
        _nav.NavigateTo($"/update-post/{postId}");
    }
    private async Task HandleDelete(int postId)
    {
        var parameters = new DialogParameters<PostDeleteDialog>
        {
            { x => x.ContentText, "Do you really want to delete this post? This process cannot be undone." },
            { x => x.ButtonText, "Delete" },
            { x => x.Color, Color.Error }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, BackdropClick= false };

        var dialog = await DialogService.ShowAsync<PostDeleteDialog>("Delete", parameters, options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            try
            {
                var res = await _postService.DeletePostAsync(postId);
                if (res)
                {
                    Snackbar.Add("Post was deleted successfully", Severity.Success);
                    _nav.NavigateTo("/");
                }
                {
                    Snackbar.Add("Error deleting the post. Please try again.", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error deleting post : {ex}");
                Snackbar.Add("Error deleting the post. Please try again.", Severity.Error);

            }
        }
    }
    private void HandleAuthor(string Id)
    {
        _nav.NavigateTo($"/author/{Id}");
    }
    private void HandleCategory(int Id)
    {
        _nav.NavigateTo($"/category/{Id}");
    }
}
