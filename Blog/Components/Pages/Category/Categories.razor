@page "/Categories"
@inject PostService _postService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject ILogger<Categories> _logger
@inject ISnackbar Snackbar

<PageTitle>Categories</PageTitle>


 <section class="relative h-[30vh] bg-cover bg-center rounded-2xl">
        <div class="rounded-2xl bg-[#F6F6F7] absolute inset-0 p-2  flex flex-col gap-4 items-center justify-center">
            <div class="flex items-center gap-2">
                <p class="text-2xl font-bold ">Categories</p>
            </div>
           
        </div>
    </section>

@if(categories is null)
{
    <LoadingPosts />
}
else if(categories.Count == 0)
{
    <p>No categories to display</p>
}
else
{
    <div class="relative w-full md:w-[40%]">
        <!-- Search bar -->
        <MudTextField Adornment="Adornment.End" @bind-Value="searchKeyword" @bind-Value:after="OnSearchAsync"
                      InputType="InputType.Search" Placeholder="Search for categories..."
                      AdornmentIcon="@Icons.Material.Filled.Search" />
    </div>
    <div class="grid gap-8 grid-cols-2 md:grid-cols-3 lg:grid-cols-4 2xl:grid-cols-5 my-10 justify-center">

        @foreach (var category in categories)
        {

            <div class="p-4 cursor-pointer flex flex-col justify-center items-center bg-blue-800 shadow-lg rounded-lg gap-3 w-full md:w-[260px] h-[120px] max-h-[500px]" @onclick="() => NavigateToCategory(category.Id)">
                
                <h1 class="text-xl text-white text-center font-bold">@category.Name</h1>
               
            </div>

        }
    </div>
    <div class="flex justify-center mt-4">
        <MudPagination Color="Color.Primary" Count="@totalPages" SelectedChanged="OnPageChanged" />
    </div>
}

@code {
    private List<Category> categories;
    private int currentPage = 1;
    private int pageSize = 10; // Number of posts per page
    private int totalPages = 1; // Total number of pages
    private string searchKeyword = string.Empty;

    protected override async Task OnInitializedAsync()
    {

        await LoadCategories();
    }
    private async Task LoadCategories()
    {
        try
        {
            var res = await _postService.GetAllCategoriesAsync(searchKeyword,currentPage,pageSize);
            categories = res.Categories;
            totalPages = res.TotalPages;
        }
        catch (Exception ex)
        {
            _logger.LogError($"Error fetching categories : {ex}");
            Snackbar.Add("Error fetching categories. Try again later", Severity.Error);
        }
    }
    private async Task OnSearchAsync()
    {
        currentPage = 1; // Reset to first page when searching
        await LoadCategories();
        StateHasChanged();
    }
    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadCategories();
        StateHasChanged();
    }
    private void NavigateToCategory(int Id)
    {
        NavigationManager.NavigateTo($"/category/{Id}");
    }
}
