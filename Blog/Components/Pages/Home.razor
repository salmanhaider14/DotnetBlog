@page "/"
@inject PostService postService
<PageTitle>Home</PageTitle>
@inject NavigationManager _navigation
@rendermode InteractiveServer
@using Size = MudBlazor.Size
@inject ILogger<Home> _logger
@inject ISnackbar Snackbar

@if (posts is null)
{
    <LoadingPosts />
}
else
{

    <section class="relative h-[70vh] bg-cover bg-center rounded-2xl" style="background-image: url('/header-img.jpg');">
        <div class="rounded-2xl bg-black absolute inset-0 bg-opacity-50 flex items-center justify-center">
            <div class="text-center text-white px-4">
                <h1 class="text-4xl md:text-5xl font-bold mb-4">Thoughts & Threads</h1>
                <p class="text-xl md:text-2xl">Connecting the World through Words and Wisdom</p>
            </div>
        </div>
    </section>

    <h1 class="font-bold text-2xl my-6">Latest Posts</h1>

    @if (posts.Count == 0)
    {
        <p>No posts to display</p>
    }
    else
    {
        <div class="grid gap-8 grid-cols-1 md:grid-cols-2 lg:grid-cols-3 2xl:grid-cols-4 my-6 justify-center">

            <PostsDisplay Posts="posts" />
        </div>
    }
    <div class="flex justify-center">
        <MudButton Variant="Variant.Outlined" Class="my-4" OnClick="NavigateToBlogs">View All</MudButton>
    </div>

}

@code {
    private List<Post> posts;
    private bool IsLoading = false;

    protected override async Task OnInitializedAsync()
    {
       
        try
        {
            posts = await postService.GetAllPostsAsync();
        }
        catch(Exception ex)
        {
            _logger.LogError("Error getting posts", ex);
            Snackbar.Add("Error loading posts.Try again later", Severity.Error);
        }
    }
    private void NavigateToBlogs()
    {
        _navigation.NavigateTo("/posts");
    }
}
