@page "/Authors"
@inject UserManager<ApplicationUser> _userManager
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject ILogger<Authors> _logger

<PageTitle>Authors</PageTitle>

<section class="relative h-[30vh] bg-cover bg-center rounded-2xl">
    <div class="rounded-2xl bg-[#F6F6F7] absolute inset-0 p-2  flex flex-col gap-4 items-center justify-center">
        <div class="flex items-center gap-2">
            <p class="text-2xl font-bold ">Authors</p>
        </div>

    </div>
</section>

@if(authors is null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else if(authors.Count == 0)
{
    <p>No authors to display</p>
}
else
{
    <div class="grid gap-8 grid-cols-1 md:grid-cols-2 lg:grid-cols-3 2xl:grid-cols-4 my-6 justify-center">

        @foreach (var author in authors)
        {

            <MudCard Class="p-4 flex flex-col gap-3 w-full md:w-[270px] h-[200px] max-h-[500px]" @onclick ="() => NavigateToAuthor(author.Id)">

                <MudCardMedia Image="https://images.unsplash.com/photo-1517404215738-15263e9f9178?q=80&w=1470&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D" Height="150" />

                <h1 class="text-lg font-semibold">@author.FullName</h1>

                </MudCard>

        }
    </div>
}


@code {
    private IList<ApplicationUser> authors;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            authors = await _userManager.GetUsersInRoleAsync("Author");
        }
        catch(Exception ex)
        {
            _logger.LogError($"Error fetching authors : ex");
        }

    }
    private void NavigateToAuthor(string Id)
    {
        NavigationManager.NavigateTo($"/author/{Id}");
    }
}
